1. import re
2. re.match(正则表达式,需要匹配的数据),如果匹配成功会返回一个类，否则不会返回
3. 返回的类.group得到提取的数据
4. 正则表达式规则：
   .匹配任何字符
   []匹配括号中的字符
   \d匹配数字
   \D匹配非数字
   \s匹配空白
   \S匹配非空白
   \w匹配单词字符，如a-z,A-Z,0-9
   \W匹配非单词字符
   ^从头开始匹配在中括号中使用时后面接别的匹配符，意思是除了这个以外

   *匹配前一个字符出现0次或多次 （一般情况下不能匹配换行符） re.match("*",html_content,re.S)后可以匹配\n
   +匹配前一个字符出现1次或多次
   *匹配前一个字符出现0次或多次
   ?匹配前一个字符出现0次或一次
   {M}匹配前一个字符出现m次
   {m,n}匹配前一个字符出现m次到n次

   |匹配左边或者右边任意一个表达式，一般和括号一起使用
   (ab)将ab作为一个分组，括号中的内容可以取出
   \num引用分组num匹配到的字符串例如 re.match(r"<(\w*)>.*</\1>")   \1代表的是第一个括号里的内容
   (?P<name>xxx) 为xxx起名为name
   (?p=name) 这部分和name相同


5.通常情况下re.match不会从头匹配到尾，会返回符合要求的部分
   ^匹配字符串开头
   $匹配字符串结尾

6.re.match通常从头开始匹配
  re.search 再带匹配数据里查找
  如：
  ret = re.search(r"\d+","阅读数量 9999")
  re.group
  返回值是9999,re.search只返回找到的第一个

7.re.findall的返回值是一个列表，直接返回数据，不需要.group
  ret = re.sub(r"\d+","998","python=999,java=998,C++=1024)
  返回值返回一个字符串，先匹配再修改，返回修改后的字符串
  re.sub的第二个参数支持填函数的引用，程序会将匹配出来的结果作为参数传入，然后结果替换原来的成分
  re.split
  ret = re.split(r":| ","info:xiaoZhang 33 shandong"),返回的是个列表